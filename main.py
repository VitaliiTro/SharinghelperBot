import data
import asyncio
import logging
import sqlite3
import datetime
import os

from aiogram.enums.parse_mode import ParseMode
from PIL import Image
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
from aiogram import F
from aiogram.types import ContentType
from aiogram.filters import Command
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from babel.dates import format_date





API_TOKEN = data.token
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

owner = data.owner
worker = data.worker

logging.basicConfig(filename='Sharinghelper.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Form(StatesGroup):
    user = State()
    ID = State()


@dp.message(Command("id"))
async def start_message(message: types.Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /id")

    await message.answer("–í–∞—à ID: " + str(message.from_user.id))


@dp.message(Command("start"))
async def start_message(message: types.Message):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /start")

    await bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é. –¶–µ –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ "–ü–†–û–ö–ê–¢–∞–π—Å—èüõ¥"!\n'
                                            '–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑ –ú–µ–Ω—é')




def get_scooters_by_city(city: str):
    logging.info(f"–§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∞–º–æ–∫–∞—Ç—ñ–≤ —É –º—ñ—Å—Ç—ñ: {city}")

    conn = sqlite3.connect("base_scooters.db")
    cursor = conn.cursor()

    query = """
    SELECT NUMBER_SCOOTER
    FROM SCOOTERS  
    WHERE LOWER(TRIM(city)) = LOWER(TRIM(?))
    """

    cursor.execute(query, (city,))
    scooters = cursor.fetchall()

    conn.close()

    scooters_list = [scooter[0] for scooter in scooters]
    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(scooters_list)} —Å–∞–º–æ–∫–∞—Ç—ñ–≤ —É –º—ñ—Å—Ç—ñ {city}")

    return scooters_list


def get_cities():
    conn = sqlite3.connect("base_scooters.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT CITY FROM users WHERE from_work IS NULL AND period_work IS NULL")
    cities = [row[0] for row in cursor.fetchall()]
    conn.close()
    return cities







class Users(StatesGroup):
    user_name = State()
    surname = State()
    name = State()
    patronymic = State()
    birthday = State()
    age = State()
    phone_number = State()
    city = State()
    position = State()
    to_work = State()
    from_work = State()
    period_work = State()
    photo_passport = State()
    comment = State()
    responsible_employer = State()


class REPAIRS(StatesGroup):
    DATE_REPAIR = State()
    WORKER_PERSON = State()
    CITY = State()
    NAME_SCOOTER = State()
    TYPE_REPAIR = State()
    REPAIR = State()
    COMMENT = State()
    PHOTO_REPAIR = State()
    RESPONSIBLE_PERSON = State()



class PURCHASES(StatesGroup):
    DATE_BOUGHT = State()
    BUYER_PERSON = State()
    CITY = State()
    PURCHASE = State()
    QUANTITY = State()
    COST_PURCHASE = State()
    REASON_PURCHASE = State()
    COMMENT = State()
    PHOTO_PURCHASE = State()
    RESPONSIBLE_PERSON = State()

class DELETE_USER(StatesGroup):
        USER_NAME = State()
        CITY = State()
        FOR_WORK = State()


# üîπ –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω
class PurchaseState(StatesGroup):
    purchase_person = State()  


# üîπ –°—Ç–∞—Ç–∏—á–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º—ñ—Å—Ç
keyboard_city = ReplyKeyboardBuilder()
keyboard_city.row(types.KeyboardButton(text="–ö–∞–Ω—ñ–≤"),
                types.KeyboardButton(text="–õ—É–±–Ω–∏"))
keyboard_city.row(types.KeyboardButton(text="–ü—Ä–∏–ª—É–∫–∏"))


keyboard_type_repair = ReplyKeyboardBuilder()
keyboard_type_repair.row(types.KeyboardButton(text="–ó–∞–º—ñ–Ω–∞ –¥–µ—Ç–∞–ª—ñ"),
                         types.KeyboardButton(text="–†–µ–º–æ–Ω—Ç"))

keyboard_position = ReplyKeyboardBuilder()
keyboard_position.row(types.KeyboardButton(text="–¢–µ—Ö–Ω—ñ–∫, –î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                types.KeyboardButton(text="–¢–µ—Ö–Ω—ñ–∫"))
keyboard_position.row(types.KeyboardButton(text="–î–∏—Å–ø–µ—Ç—á–µ—Ä"),
                types.KeyboardButton(text="–ú–µ–Ω–µ–¥–∂–µ—Ä"))





@dp.message(Command("user_delete"))
async def delete_user(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /user_delete")

    if message.from_user.id in owner:
            await state.set_state(DELETE_USER.CITY)
            await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user_delete\n\n"
                                "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=keyboard_city.as_markup(resize_keyboard=True))
    else:
        await bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó!\U0001F4A2\n")
        await bot.send_message(message.chat.id, '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ—ó –∫–æ–º–∞–Ω–¥–∏: \n'
                                                '–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ @vvitalino –∫–æ–º–∞–Ω–¥—É —Ç–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä'
                                                + str(message.from_user.id))


@dp.message(Command("cancel_user_delete"))
async def delete_user(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /cancel_user_delete")

    current_state = await state.get_state()
    if current_state is None:
        return

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await state.clear()
    await message.reply('–°—Ç–∞–Ω –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ!',reply_markup=types.ReplyKeyboardRemove())



# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞
@dp.message(DELETE_USER.CITY)
async def city_selected(message: types.Message, state: FSMContext):
    await state.update_data(CITY=message.text)
    data = await state.get_data()
    city = data.get("CITY")

    if not city:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.")
        return

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect("base_scooters.db")
    cursor = conn.cursor()

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è SQL-–∑–∞–ø–∏—Ç—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é NULL —Ç–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
    cursor.execute(
        """SELECT user_name 
           FROM users 
           WHERE CITY = ? 
           AND (from_work IS NULL OR from_work = '') 
           AND (period_work IS NULL OR period_work = '')""",
        (city,)
    )

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —ñ–º–µ–Ω
    users = [row[0] for row in cursor.fetchall()]

    # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    conn.close()

    if not users:
        await message.reply("–ù–µ–º–∞—î –∫–æ–≥–æ –∑–≤—ñ–ª—å–Ω—è—Ç–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        await message.reply("–°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ")
        return
    def get_users_keyboard(users, row_width=2):
        builder = ReplyKeyboardBuilder()
        for user in users:
            builder.button(text=str(user))
        return builder.adjust(row_width).as_markup(resize_keyboard=True)

    keyboard = get_users_keyboard(users, row_width=2)

    await state.set_state(DELETE_USER.USER_NAME)
    await message.reply("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞:", reply_markup=keyboard)



@dp.message(DELETE_USER.USER_NAME)
async def user_selected(message: types.Message, state: FSMContext):
    await state.update_data(USER_NAME=message.text)
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è (–†–†–†–†-–ú–ú-–î–î)", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(DELETE_USER.FOR_WORK)


@dp.message(DELETE_USER.FOR_WORK)
async def get_leave_date(message: types.Message, state: FSMContext):
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        from_work = datetime.datetime.strptime(message.text, "%Y-%m-%d").date()

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ FSM
        data = await state.get_data()
        user_name = data.get("USER_NAME")

        if not user_name:
            await message.reply("–ü–æ–º–∏–ª–∫–∞: –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –Ω–µ –≤–∏–±—Ä–∞–Ω–∏–π")
            return

        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏
        conn = sqlite3.connect("base_scooters.db")
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø—Ä–∏–π–æ–º—É –Ω–∞ —Ä–æ–±–æ—Ç—É (`to_work`)
        cursor.execute(
            """SELECT to_work 
               FROM users 
               WHERE user_name = ? 
               AND (from_work IS NULL OR TRIM(from_work) = '') 
               AND responsible_employer_status LIKE '%–ø–æ–≥–æ–¥–∂–µ–Ω–æ%'""",
            (user_name,)
        )

        to_work = cursor.fetchone()

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –∞–±–æ –¥–∞—Ç–∞ `to_work` –≤—ñ–¥—Å—É—Ç–Ω—è
        if not to_work or not to_work[0]:
            await message.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞—Ç—É –ø—Ä–∏–π–æ–º—É –Ω–∞ —Ä–æ–±–æ—Ç—É.")
            conn.close()
            return

        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—ñ–æ–¥—É —Ä–æ–±–æ—Ç–∏
        to_work_date = datetime.datetime.strptime(to_work[0], "%Y-%m-%d").date()
        delta = from_work - to_work_date
        years, remainder = divmod(delta.days, 365)
        months, days = divmod(remainder, 30)
        period_work = f"{years} years, {months} months, {days} days"

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –ë–î

        update_query = f'''
                UPDATE users 
                SET from_work = ?, period_work = ? 
                WHERE user_name = ?;
            '''

        cursor.execute(update_query, (from_work, period_work, user_name))

        conn.commit()
        conn.close()
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        await message.reply("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —É –ë–î!")

        # –ó–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–∞–Ω
        await state.clear()

    except ValueError:
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (–†–†–†–†-–ú–ú-–î–î).")




'''///////////////////////////////////////////////////////////////////////////////////////////////////////////'''


@dp.message(Command("user"))
async def add_user(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /user")

    if message.from_user.id in owner:
        await state.set_state(Users.surname)
        await message.reply("–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ª—É–∂–±–æ–≤–æ—ó –ø–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–æ!\n"
                            "–ü—Ä–∞–≤–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É –ù–ï–ú–ê–Ñ - –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ!\n\n"
                            "*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                            "–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")
    else:
        await bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó!\U0001F4A2\n")
        await bot.send_message(message.chat.id, '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ—ó –∫–æ–º–∞–Ω–¥–∏: \n'
                                                '–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ @vvitalino –∫–æ–º–∞–Ω–¥—É —Ç–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä'
                                                + str(message.from_user.id))





@dp.message(Command("cancel_user"))
async def add_user(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /cancel_user")

    current_state = await state.get_state()
    if current_state is None:
        return

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await state.clear()
    await message.reply('–°—Ç–∞–Ω –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ!')



@dp.message(Users.surname)
async def process_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await state.set_state(Users.name)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")


@dp.message(Users.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Users.patronymic)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")


@dp.message(Users.patronymic)
async def process_patronymic(message: types.Message, state: FSMContext):
    await state.update_data(patronymic=message.text)
    await state.set_state(Users.birthday)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞\n"
                        "—É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002-05-11)")


@dp.message(Users.birthday)
async def process_age(message: types.Message, state: FSMContext):
    birthday = message.text.strip()

    def is_valid_date(date_text):
        try:
            datetime.datetime.strptime(date_text, "%Y-%m-%d").date()
            return True
        except ValueError:
            return False

    if not is_valid_date(birthday):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2002-05-11)")
        return

    await state.update_data(birthday=message.text)
    await state.set_state(Users.phone_number)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞\n"
                        "(–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –≤—ñ–¥ 10 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤, –º–æ–∂–ª–∏–≤–æ –∑ '+')")


@dp.message(Users.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    phone_number = message.text.strip()

    def is_valid_phone(phone_number):
        return (phone_number.startswith('+') and phone_number[1:].isdigit() and 10 <= len(phone_number[1:]) <= 12) or \
               (phone_number.isdigit() and 10 <= len(phone_number) <= 12)

    if not is_valid_phone(phone_number):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–ª–∏—à–µ —Ü–∏—Ñ—Ä–∏, –≤—ñ–¥ 10 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤, –º–æ–∂–ª–∏–≤–æ –∑ '+')")
        return

    await state.update_data(phone_number=message.text)
    await state.set_state(Users.city)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞", reply_markup=keyboard_city.as_markup(resize_keyboard=True))


@dp.message(Users.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Users.position)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∞–¥—É —Ä–æ–±–æ—Ç–∏", reply_markup=keyboard_position.as_markup(resize_keyboard=True))
    

@dp.message(Users.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(Users.to_work)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–∏–π–Ω—è—Ç—Ç—è –Ω–∞ —Ä–æ–±–æ—Ç—É", reply_markup=types.ReplyKeyboardRemove())


@dp.message(Users.to_work)
async def process_to_work(message: types.Message, state: FSMContext):
    to_work = message.text.strip()

    def is_valid_date(date_text):
        try:
            datetime.datetime.strptime(date_text, "%Y-%m-%d").date()
            return True
        except ValueError:
            return False

    if not is_valid_date(to_work):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2023-08-16)")
        return

    await state.update_data(to_work=message.text)
    await state.set_state(Users.comment)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_user\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –ø—Ä–æ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞")
    

@dp.message(Users.comment)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await state.set_state(Users.photo_passport)
    await message.reply("–û–ë–û–í'–Ø–ó–ö–û–í–û –ù–ê–î–Ü–®–õ–Ü–¢–¨ –û–î–ù–ï –§–û–¢–û –ü–ê–°–ü–û–†–¢–£!\n"
                        "–û–î–ù–ï –Ø–ö–Ü–°–ù–ï –§–û–¢–û!")



# –û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ
@dp.message(Users.photo_passport, F.content_type == ContentType.PHOTO)
async def process_photo_passport(message: types.Message, state: FSMContext):
    temp = await state.get_data()
    photos = temp.get("photos", [])

    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ –¥–æ —Å–ø–∏—Å–∫—É
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ñ–æ—Ç–æ
    if len(photos) < 2:  
        await message.reply("–ù–ê–î–Ü–®–õ–Ü–¢–¨ –§–û–¢–û –ü–ê–°–ü–û–†–¢–£ –ó –Ü–ù–®–û–á –°–¢–û–†–û–ù–ò")
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –≤ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
    file_paths = []
    for i, file_id in enumerate(photos):
        file_path = f"data/temp_user_photo_passport/temp_{file_id}_{i}.jpg"
        file_paths.append(file_path)
        await bot.download(file_id, destination=file_path)
    
    # –û–±'—î–¥–Ω—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    images = [Image.open(fp) for fp in file_paths]
    widths, heights = zip(*(img.size for img in images))
    combined_image = Image.new("RGB", (max(widths), sum(heights)))
    
    y_offset = 0
    for img in images:
        combined_image.paste(img, (0, y_offset))
        y_offset += img.size[1]
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ —Ñ–æ—Ç–æ
    combined_path = f"data/user_photo_passport/{photos[0]}.jpg"
    combined_image.save(combined_path)
    name_combined_photo = f"{photos[0]}"

    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
    for fp in file_paths:
        os.remove(fp)

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—à–∏—Ö –¥–∞–Ω–∏—Ö
    date = datetime.datetime.now().strftime("%H:%M  %Y-%m-%d")
    birthday_date = datetime.datetime.strptime(temp['birthday'], "%Y-%m-%d").date()
    to_work_date = datetime.datetime.strptime(temp['to_work'], "%Y-%m-%d").date()
    age = to_work_date.year - birthday_date.year - ((to_work_date.month, to_work_date.day) < (birthday_date.month, birthday_date.day))
    user_name = temp['surname'] + " " + temp['name'] + " " + temp['patronymic']
    
    temp.update({
        'user_name': user_name,
        'age': age,
        'responsible_employer': "–¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π",
        'date': date,
        'responsible_employer_status': "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937",
        'photo_passport': name_combined_photo 
    })
    
    text = (f"–°–õ–£–ñ–ë–û–í–ê: –ü–†–ò–ô–ù–Ø–¢–¢–Ø –ù–ê –†–û–ë–û–¢–£\n"
            f"[{temp['date']}]\n"
            f"–ü–Ü–ë: {temp['user_name']}\n"
            f"–î–ï–ù–¨ –ù–ê–†–û–î–ñ–ï–ù–ù–Ø: {temp['birthday']}\n"
            f"–í–Ü–ö: {temp['age']}\n"
            f"–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–£: {temp['phone_number']}\n"
            f"–ú–Ü–°–¢–û: {temp['city']}\n"
            f"–ü–û–°–ê–î–ê: {temp['position']}\n"
            f"–ü–†–ò–ô–ù–Ø–¢–û –ù–ê –†–û–ë–û–¢–£: {temp['to_work']}\n"
            f"–ö–û–ú–ï–ù–¢–ê–†: {temp['comment']}\n\n"
            f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
            f"{temp['responsible_employer']} - {temp['responsible_employer_status']}")
    
    photo_passport = FSInputFile(combined_path)
    IMPORTANT = await bot.send_photo(chat_id=data.scooter_chat, message_thread_id=data.scooter_users,
                                     photo=photo_passport, caption=text)
    
    temp['user_id'] = message.from_user.id
    temp['chat_id'] = IMPORTANT.chat.id
    temp['thread_id'] = IMPORTANT.message_thread_id  
    temp['message_id'] = IMPORTANT.message_id

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO users (date, user_id, user_name, surname, name, patronymic, birthday, age, phone_number, city, position, to_work, 
                                        comment, responsible_employer, responsible_employer_status, photo_passport, chat_id, thread_id, message_id) 
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);''',
                   (temp['date'], temp['user_id'], temp['user_name'], temp['surname'], temp['name'], temp['patronymic'], temp['birthday'],
                    temp['age'], temp['phone_number'], temp['city'], temp['position'], temp['to_work'], temp['comment'],
                    temp['responsible_employer'], temp['responsible_employer_status'], temp['photo_passport'], temp['chat_id'],
                    temp['thread_id'], temp['message_id']))
    id_sluzhbova = cursor.lastrowid
    conn.commit()
    conn.close()
    
    
    await message.reply(f"–°–ª—É–∂–±–æ–≤—É –ø–æ –ø—Ä–∏–π–Ω—è—Ç—Ç—ñ –Ω–∞ —Ä–æ–±–æ—Ç—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\nC–ª—É–∂–±–æ–≤–∞ ‚Ññ{id_sluzhbova}",
                        parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()

'''////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'''




def get_buyers_by_city(city: str):
    logging.info(f"–§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è –º—ñ—Å—Ç–∞: {city}")

    conn = sqlite3.connect("base_scooters.db")
    cursor = conn.cursor()

    query = """
    SELECT surname, name 
    FROM users 
    WHERE 
        (from_work IS NULL OR TRIM(from_work) = '') 
        AND (to_work IS NOT NULL AND TRIM(to_work) != '') 
        AND responsible_employer_status LIKE '%–ø–æ–≥–æ–¥–∂–µ–Ω–æ%' 
        AND LOWER(TRIM(CITY)) = LOWER(TRIM(?))
    """  

    cursor.execute(query, (city,))
    buyers = cursor.fetchall()

    conn.close()

    logging.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø—Ü—ñ–≤: {len(buyers)}")  # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞

    for buyer in buyers:
        logging.info(f"–ü–æ–∫—É–ø–µ—Ü—å: {buyer[0]} {buyer[1]}")  # ‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø—Ü—ñ–≤

    return [f"{buyer[0]} {buyer[1]}" for buyer in buyers] if buyers else []


 



@dp.message(Command("purchase"))
async def add_purchase(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /purchase")


    if message.from_user.id in worker or owner:
        await state.set_state(PURCHASES.CITY)
        await message.reply("–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ª—É–∂–±–æ–≤–æ—ó –ø–æ–∫—É–ø–∫–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ!\n"
                            "–ü—Ä–∞–≤–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É –ù–ï–ú–ê–Ñ - –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ!\n\n"
                            "*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_purchase\n\n"
                            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=keyboard_city.as_markup(resize_keyboard=True))
    else:
        await bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó!\U0001F4A2\n")
        await bot.send_message(message.chat.id, '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ—ó –∫–æ–º–∞–Ω–¥–∏: \n'
                                                '–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ @vvitalino –∫–æ–º–∞–Ω–¥—É —Ç–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä'
                                                + str(message.from_user.id))



@dp.message(Command("cancel_purchase"))
async def add_user(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /cancel_purchase")

    current_state = await state.get_state()
    if current_state is None:
        return

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await state.clear()
    await message.reply('–°—Ç–∞–Ω –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ!', reply_markup=types.ReplyKeyboardRemove())


'''
@dp.message(PURCHASES.DATE_BOUGHT)
async def process_date_bought(message: types.Message, state: FSMContext):
    date_bought = message.text.strip()

    def is_valid_date(date_text):
        try:
            datetime.datetime.strptime(date_text, "%Y-%m-%d").date()
            return True
        except ValueError:
            return False

    if not is_valid_date(date_bought):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024-07-15)")
        return

    await state.update_data(DATE_BOUGHT=message.text)
    await state.set_state(PURCHASES.CITY)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_purchase\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=keyboard_city.as_markup(resize_keyboard=True))'''


@dp.message(lambda message: message.text in ["–ö–∞–Ω—ñ–≤", "–õ—É–±–Ω–∏", "–ü—Ä–∏–ª—É–∫–∏"], PURCHASES.CITY)
async def process_city_buyers_selection(message: types.Message, state: FSMContext):
    await state.update_data(CITY=message.text)

    if message.from_user.id in owner:

        await state.set_state(PURCHASES.BUYER_PERSON)
        await state.update_data(BUYER_PERSON="–¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π")

        await state.set_state(PURCHASES.PURCHASE)
        await message.reply(
            "<code>–ù–æ–≤–∞ –ø–æ—à—Ç–∞</code>\n"
            "<code>–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</code>\n"
            "<code>–ü–æ–±—É—Ç–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏</code>\n"
            "<code>–î–µ—Ç–∞–ª—ñ</code>\n"
            "<code>–°—Ç–æ, —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂</code>\n"  
            "<code>–†–µ–º–æ–Ω—Ç</code>\n"  
            "<code></code>\n\n\n"

            "\U0001F6AB–†–Ü–î–ö–û –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨–°–Ø\U0001F6AB\n"
            "<code>–û—Ä–µ–Ω–¥–∞</code>\n"
            "<code>–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è</code>\n"
            "<code>–ó–ü</code>\n"
            "<code>–°—ñ–º-–∫–∞—Ä—Ç–∏(–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç)</code>\n"
            "<code>–†–æ—è–ª—Ç—ñ</code>\n"
            "<code>–†–µ–º–æ–Ω—Ç(–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π)</code>\n"
            "<code>–ü–æ–¥–∞—Ç–∫–∏</code>\n"
            "<code>–¢–æ–≤–∞—Ä–∏ –¥–ª—è —Å–∞–º–æ–∫–∞—Ç—ñ–≤</code>\n"
            "<code>–ü–∞–ª–∏–≤–æ</code>\n"
            "<code>–í—ñ–¥—Ä—è–¥–∂–µ–Ω–Ω—è</code>\n"
            "<code>–†–µ–∫–ª–∞–º–∞</code>\n"
            "<code>–ü–µ—Ä–µ–æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è —Å–∞–º–æ–∫–∞—Ç–∞(–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∏–π)</code>\n"


            "\n\n–í–≤–µ–¥—ñ—Ç—å –ü–û–ö–£–ü–ö–£ (—Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–∞–≤–µ–¥–µ–Ω–æ –≤–∏—â–µ). –©–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É"
            " –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ –Ω—ñ–π –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏: ",
            reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)

    else:
        city = message.text
        buyers = get_buyers_by_city(city)

        buyers_str = ', '.join(buyers) if buyers else '-----'

        await state.set_state(PURCHASES.BUYER_PERSON)


        await state.update_data(BUYER_PERSON=buyers_str)



        await state.set_state(PURCHASES.PURCHASE)
        await message.reply(
            "<code>–ù–æ–≤–∞ –ø–æ—à—Ç–∞</code>\n"
            "<code>–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</code>\n"
            "<code>–ü–æ–±—É—Ç–æ–≤—ñ –≤–∏—Ç—Ä–∞—Ç–∏</code>\n"
            "<code>–î–µ—Ç–∞–ª—ñ</code>\n"
            "<code>–°—Ç–æ, —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂</code>\n"  
            "<code>–†–µ–º–æ–Ω—Ç</code>\n"          


            "\n\n–í–≤–µ–¥—ñ—Ç—å –ü–û–ö–£–ü–ö–£ (—Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–∞–≤–µ–¥–µ–Ω–æ –≤–∏—â–µ). –©–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É"
            " –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ –Ω—ñ–π –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏: ",
            reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)




@dp.message(PURCHASES.PURCHASE)
async def process_purchase(message: types.Message, state: FSMContext):
    await state.update_data(PURCHASE=message.text)
    await state.set_state(PURCHASES.COST_PURCHASE)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_purchase\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏")


@dp.message(PURCHASES.COST_PURCHASE)
async def process_cost_purchase(message: types.Message, state: FSMContext):
    await state.update_data(COST_PURCHASE=message.text)
    await state.set_state(PURCHASES.COMMENT)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_purchase\n\n"
                        "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä")


@dp.message(PURCHASES.COMMENT)
async def process_comment(message: types.Message, state: FSMContext):
    await state.update_data(COMMENT=message.text)
    await state.set_state(PURCHASES.PHOTO_PURCHASE)
    await message.reply("–û–ë–û–í'–Ø–ó–ö–û–í–û –ù–ê–î–Ü–®–õ–Ü–¢–¨ –û–î–ù–ï –§–û–¢–û –ü–û–ö–£–ü–ö–ò!\n"
                        "–û–î–ù–ï –Ø–ö–Ü–°–ù–ï –§–û–¢–û!")



@dp.message(PURCHASES.PHOTO_PURCHASE, F.content_type == ContentType.PHOTO)
async def process_photo_purchase(message: types.Message, state: FSMContext):

    file_name = f"data/photo_purchase/{message.photo[-1].file_id}.jpg"
    await bot.download(message.photo[-1], destination=file_name)

    status = "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937"
    temp = await state.get_data()
    now = datetime.datetime.now().strftime("%H:%M  %Y-%m-%d")
    now2 = datetime.datetime.now()
    month_ua = format_date(now2, "LLLL", locale="uk")


    temp['RESPONSIBLE_PERSON'] = "–¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π"
    temp['RESPONSIBLE_PERSON_STATUS'] = status
    temp['DATE'] = now
    temp['MONTH'] = month_ua
    temp['PHOTO_PURCHASE'] = message.photo[-1].file_id
    
    text = (f"–°–õ–£–ñ–ë–û–í–ê üõí–ü–û–ö–£–ü–ö–êüõí:  {temp['DATE']}\n"
            f"–ü–û–ö–£–ü–ï–¶–¨: {temp['BUYER_PERSON']}\n"
            f"–ú–Ü–°–¢–û: {temp['CITY']}\n"
            f"–ü–û–ö–£–ü–ö–ê: {temp['PURCHASE']}\n"
            f"–í–ê–†–¢–Ü–°–¢–¨: {temp['COST_PURCHASE']}\n"
            f"–ö–û–ú–ï–ù–¢–ê–†: {temp['COMMENT']}\n\n"            
            f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
            f"{temp['RESPONSIBLE_PERSON']} - {temp['RESPONSIBLE_PERSON_STATUS']}")
    
    photo_purchase = FSInputFile(file_name)
    IMPORTANT = await bot.send_photo(chat_id=data.scooter_chat, message_thread_id=data.scooter_purchases,
                                     photo=photo_purchase, caption=text)
    
    temp['USER_ID'] = message.from_user.id
    temp['CHAT_ID'] = IMPORTANT.chat.id
    temp['THREAD_ID'] = IMPORTANT.message_thread_id
    temp['MESSAGE_ID'] = IMPORTANT.message_id

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO PURCHASES (DATE, USER_ID, MONTH, BUYER_PERSON, CITY, PURCHASE, 
                            COST_PURCHASE, COMMENT, PHOTO_PURCHASE, RESPONSIBLE_PERSON, 
                            RESPONSIBLE_PERSON_STATUS, CHAT_ID, THREAD_ID, MESSAGE_ID) 
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);''',
                   (temp['DATE'], temp['USER_ID'], temp['MONTH'], temp['BUYER_PERSON'], temp['CITY'],
                    temp['PURCHASE'], temp['COST_PURCHASE'], temp['COMMENT'],
                    temp['PHOTO_PURCHASE'], temp['RESPONSIBLE_PERSON'], temp['RESPONSIBLE_PERSON_STATUS'],
                    temp['CHAT_ID'], temp['THREAD_ID'], temp['MESSAGE_ID']))
    purchase_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    
    await message.reply(f"–°–ª—É–∂–±–æ–≤—É –ø–æ –ø–æ–∫—É–ø—Ü—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\nC–ª—É–∂–±–æ–≤–∞ ‚Ññ{purchase_id}", parse_mode="HTML",
                            reply_markup=types.ReplyKeyboardRemove())
    await state.clear()

'''////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////'''

def get_worker_person_by_city(city: str):
    logging.info(f"–§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è –º—ñ—Å—Ç–∞: {city}")

    conn = sqlite3.connect("base_scooters.db")
    cursor = conn.cursor()

    query = """
    SELECT surname, name 
    FROM users 
    WHERE 
        (from_work IS NULL OR TRIM(from_work) = '') 
        AND (to_work IS NOT NULL AND TRIM(to_work) != '') 
        AND responsible_employer_status LIKE '%–ø–æ–≥–æ–¥–∂–µ–Ω–æ%' 
        AND LOWER(TRIM(CITY)) = LOWER(TRIM(?))
    """

    cursor.execute(query, (city,))
    buyers = cursor.fetchall()

    conn.close()

    logging.info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø—Ü—ñ–≤: {len(buyers)}")  # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞

    for buyer in buyers:
        logging.info(f"–ü–æ–∫—É–ø–µ—Ü—å: {buyer[0]} {buyer[1]}")  # ‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø—Ü—ñ–≤

    return [f"{buyer[0]} {buyer[1]}" for buyer in buyers] if buyers else []


@dp.message(Command("repair"))
async def add_repair(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /repair")

    if message.from_user.id in worker or owner:
        await state.set_state(REPAIRS.CITY)
        await message.reply("–§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ª—É–∂–±–æ–≤–æ—ó –ø–æ —Ä–µ–º–æ–Ω—Ç—É —Ä–æ–∑–ø–æ—á–∞—Ç–æ!\n"
                            "–ü—Ä–∞–≤–∞ –Ω–∞ –ø–æ–º–∏–ª–∫—É –ù–ï–ú–ê–Ñ - –±—É–¥—å—Ç–µ —É–≤–∞–∂–Ω—ñ!\n\n"
                            "*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_repair\n\n"
                            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=keyboard_city.as_markup(resize_keyboard=True))

    else:
        await bot.send_message(message.chat.id, "–í–∏ –Ω–µ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó!\U0001F4A2\n")
        await bot.send_message(message.chat.id, '–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–∞–∫—Ä–∏—Ç–æ—ó –∫–æ–º–∞–Ω–¥–∏: \n'
                                                '–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ @vvitalino –∫–æ–º–∞–Ω–¥—É —Ç–∞ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π –Ω–æ–º–µ—Ä'
                                                + str(message.from_user.id))



@dp.message(Command("cancel_repair"))
async def add_repair(message: types.Message, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} - {message.from_user.username} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–æ–º–∞–Ω–¥—É /cancel_repair")

    current_state = await state.get_state()
    if current_state is None:
        return

    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    await state.clear()
    await message.reply('–°—Ç–∞–Ω –±—É–ª–æ —Å–∫–∏–Ω—É—Ç–æ!', reply_markup=types.ReplyKeyboardRemove())

'''
@dp.message(REPAIRS.DATE_REPAIR)
async def process_date_repair(message: types.Message, state: FSMContext):
    date_repair = message.text.strip()

    def is_valid_date(date_text):
        try:
            datetime.datetime.strptime(date_text, "%Y-%m-%d").date()
            return True
        except ValueError:
            return False

    if not is_valid_date(date_repair):
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 2024-10-31)")
        return

    await state.update_data(DATE_REPAIR=message.text)
    await state.set_state(REPAIRS.CITY)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_repair\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ", reply_markup=keyboard_city.as_markup(resize_keyboard=True))
'''

@dp.message(lambda message: message.text in ["–ö–∞–Ω—ñ–≤", "–õ—É–±–Ω–∏", "–ü—Ä–∏–ª—É–∫–∏"], REPAIRS.CITY)
async def process_city_repairs_selection(message: types.Message, state: FSMContext):
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –º—ñ—Å—Ç–æ: {message.text}")
    await state.update_data(CITY=message.text)

    data = await state.get_data()
    logging.info(f"–°—Ç–∞–Ω –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º—ñ—Å—Ç–∞: {data}")

    city = message.text
    buyers = get_worker_person_by_city(city)

    buyers_str = ', '.join(buyers) if buyers else '-----'

    await state.set_state(REPAIRS.WORKER_PERSON)
    await state.update_data(WORKER_PERSON=buyers_str)

    await state.set_state(REPAIRS.NAME_SCOOTER)

    data = await state.get_data()
    city = data.get("CITY")

    if not city:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ",
                            reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    logging.info(f"–§—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞–Ω–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∞–º–æ–∫–∞—Ç—ñ–≤ —É –º—ñ—Å—Ç—ñ: {city}")

    city = message.text
    scooters = get_scooters_by_city(city)  # –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–∫–∞—Ç—ñ–≤

    if not scooters:
        await message.reply("–°–∞–º–æ–∫–∞—Ç–∏ —É —Ü—å–æ–º—É –º—ñ—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return

    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(scooters)} —Å–∞–º–æ–∫–∞—Ç—ñ–≤ —É –º—ñ—Å—Ç—ñ {city}")


    def get_scooter_keyboard(scooters, row_width=2):
        builder = ReplyKeyboardBuilder()
        for scooter in scooters:
            builder.button(text=str(scooter))
        return builder.adjust(row_width).as_markup(resize_keyboard=True)

    keyboard = get_scooter_keyboard(scooters, row_width=6)


    await state.set_state(REPAIRS.NAME_SCOOTER)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_repair\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä —Å–∞–º–æ–∫–∞—Ç—É", reply_markup=keyboard)


@dp.message(REPAIRS.NAME_SCOOTER)
async def process_name_scooter(message: types.Message, state: FSMContext):
    await state.update_data(NAME_SCOOTER=message.text)
    await state.set_state(REPAIRS.TYPE_REPAIR)
    await message.reply("*–¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel_repair\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ —Ä–µ–º–æ–Ω—Ç—É", reply_markup=keyboard_type_repair.as_markup(resize_keyboard=True))





@dp.message(lambda message: message.text in ["–ó–∞–º—ñ–Ω–∞ –¥–µ—Ç–∞–ª—ñ"], REPAIRS.TYPE_REPAIR)
async def process_type_repair(message: types.Message, state: FSMContext):
    await state.update_data(TYPE_REPAIR=message.text)
    await state.set_state(REPAIRS.REPAIR)
    await message.reply(
                        "<code>–®–∏–Ω–∏ –Ω–µ–æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ + –∞–Ω—Ç–∏–ø—Ä–æ–∫–æ–ª—å–Ω–∞ —Ä—ñ–¥–∏–Ω–∞</code>\n"
                        "<code>–®–∏–Ω–∏ –ª–∏—Ç—ñ</code>\n"
                        "<code>–†—É—á–∫–∞ –≥–∞–∑—É</code>\n"
                        "<code>–†—É—á–∫–∞ —Ç–æ—Ä–º–æ–∑—É</code>\n"
                        "<code>–í—Ç—É–ª–∫–∞+–±–æ–ª—Ç–∏+–≥–∞–π–∫–∏ –º–µ—Ö–∞–Ω—ñ–∑–º—É —Å–∫–ª–∞–¥–∞–Ω–Ω—è</code>\n"
                        "<code>–Ø–∑–∏—á–æ–∫ —Å–∫–ª–∞–¥–∞–Ω–Ω—è</code>\n"
                        "<code>–í—Ç—É–ª–∫–∞ –¥–æ —è–∑–∏—á–∫–∞ —Å–∫–ª–∞–¥–∞–Ω–Ω—è</code>\n"
                        "<code>–ì–∞–ª—å–º—ñ–≤–Ω—ñ –∫–æ–ª–æ–¥–∫–∏</code>\n"
                        "<code>–ü–µ—Ä–µ–¥–Ω—è –≤–∏–ª–∫–∞</code>\n"
                        "<code>–§–∞—Ä–∞ (–ø—Ä–æ–∂–µ–∫—Ç–æ—Ä) –ø–µ—Ä–µ–¥–Ω—è</code>\n"
                        "<code>–î–∑–≤—ñ–Ω–æ–∫</code>\n"
                        "<code>–ö–∞–±–µ–ª—å –∑'—î–¥–Ω–∞–Ω–Ω—è BLE (–≥–æ–ª–æ–≤–∏)</code>\n"
                        "<code>–¢–æ—Ä–º–æ–∑–Ω–∏–π —Ç—Ä–æ—Å—ñ–∫</code>\n"
                        "<code>–õ–∞–ø–∫–∞ (–ø—ñ–¥–Ω—ñ–∂–∫–∞)</code>\n"
                        "<code>–ì—Ä—ñ–ø—Å–∏ –∑–≤–∏—á–∞–π–Ω—ñ –Ω–∞ —Ä—É–ª—å (–ø–∞—Ä–∞)</code>\n"
                        "<code>–ì—Ä—ñ–ø—Å–∏ —à–µ—Ä—ñ–Ω–≥–æ–≤—ñ –Ω–∞ —Ä—É–ª—å (–ø–∞—Ä–∞)</code>\n"
                        "<code>–ü–ª–∞—Å—Ç–∏–∫–æ–≤–µ –∫—ñ–ª—å—Ü–µ —Ñ—ñ–∫—Å–∞—Ç–æ—Ä –≤—É–∑–ª–∞ —Å–∫–ª–∞–¥—É–≤–∞–Ω–Ω—è</code>\n"
                        "<code>–ü–µ—Ä–µ–¥–Ω—î –∫—Ä–∏–ª–æ</code>\n"
                        "<code>–ó–∞–¥–Ω—î –∫—Ä–∏–ª–æ –∑ –º–∞–ª–∏–º —Å—Ç–æ–ø–æ–º –≤ –∑–±–æ—Ä—ñ</code>\n"
                        "<code>–†–µ–∑–∏–Ω–æ–≤—ñ –∑–∞–≥–ª—É—à–∫–∏ (3 —à—Ç)</code>\n"
                        "<code>–ó–∞—Ö–∏—Å–Ω–∞ –ø–∞–Ω–µ–ª—å —Å–ø—ñ–¥–æ–º–µ—Ç—Ä–∞ (bLE)</code>\n\n\n"
                
                
                        "\U00002699–ü–Ü–î–®–ò–ü–ù–ò–ö–ò, –ü–†–û–°–¢–ê–í–ö–ò\U00002699\n"
                        "<code>–ü–µ—Ä–µ–¥–Ω—ñ –ø—ñ–¥—à–∏–ø–Ω–∏–∫–∏</code>\n"
                        "<code>–®–∞–π–±–∏ –≤ –º–æ—Ç–æ—Ä-–∫–æ–ª–µ—Å–æ</code>\n"
                        "<code>–®–∞–π–±–∏(–∑–±—ñ–ª—å—à. –¥—ñ–∞–º–µ—Ç—Ä—É) –≤ –º–æ—Ç–æ—Ä-–∫–æ–ª–µ—Å–æ</code>\n"
                        "<code>–ó–∞–¥–Ω—ñ –ø—ñ–¥—à–∏–ø–Ω–∏–∫–∏</code>\n\n\n"
                        
                        
                        "\U0001F6AB–†–Ü–î–ö–û –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨–°–Ø\U0001F6AB\n"
                        "<code>–ì–∞–ª—å–º—ñ–≤–Ω–∏–π –¥–∏—Å–∫</code>\n"
                        "<code>–†—É–ª—å –≤ –∑–±–æ—Ä—ñ (—Ç–æ–π, –Ω–∞ —è–∫–æ–º—É –≥—Ä—ñ–ø—Å–∏ —Ç–∞ —Å–ø—ñ–¥–æ–º–µ—Ç—Ä)</code>\n"
                        "<code>–†—É–ª—å–æ–≤–∞ —Ç—Ä—É–±–∞+–≤—É–∑–æ–ª —Å–∫–ª–∞–¥—É–≤–∞–Ω–Ω—è</code>\n"
                        "<code>–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä (–º–∞—Ç –ø–ª–∞—Ç–∞)</code>\n"
                        "<code>–ü–ª–∞—Ç–∞ –≥–æ–ª–æ–≤–∏ BLE (—Å–ø—ñ–¥–æ–º–µ—Ç—Ä)</code>\n"
                        "<code>–ü–ª–∞—Ç–∞ –ë–ú–° –≤ –∞–∫—É–º—É–ª—è—Ç–æ—Ä)</code>\n"
                        "<code>–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ñ –Ω–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é –≤–∏–ª–∫—É</code>\n"
                        "<code>–ü–ª–∞—Å—Ç–∏–∫–æ–≤—ñ –Ω–∞–∫–ª–∞–¥–∫–∏ –¥–ª—è –∑–∞–¥–Ω—ñ—Ö –±–æ–ª—Ç—ñ–≤</code>\n"
                        "<code>–ö—Ä–∏—à–∫–∞ –¥–µ–∫–∏</code>\n"
                        "<code>–†–æ–∑–ø–∞—Ä–Ω—ñ –∫–æ–ª—å—Ü—ñ –¥–ª—è –≤–∏–ª–∫–∏ (–ø–∞—Ä–∞)</code>\n"
                        "<code>–ì–∞–ª—å–º—ñ–≤–Ω–∏–π –¥–∏—Å–∫</code>\n"
                        "<code>–î–µ–∫–∞ (–∫–æ—Ä–ø—É—Å, —Ç–∞–º –¥–µ –∞–∫—É–º —ñ –≤—Å—è –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞)</code>\n"
                        "<code>–ì—É–º–æ–≤–∏–π –∫–∏–ª–∏–º–æ–∫ –¥–ª—è –¥–µ–∫–∏</code>\n"
                        "<code>–ü–µ—Ä–µ–¥–Ω—î –∫–æ–ª–µ—Å–æ+—à–∏–Ω–∞</code>\n"
                        "<code>–ú–æ—Ç–æ—Ä-–∫–æ–ª–µ—Å–æ+—à–∏–Ω–∞</code>\n"
                        "<code>–¢—Ä–µ–∫–µ—Ä</code>\n"


                        "\n\n–í–≤–µ–¥—ñ—Ç—å –¥–µ—Ç–∞–ª—å (—Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞–≤–µ–¥–µ–Ω–æ –≤–∏—â–µ). –©–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É"
                        " –¥–µ—Ç–∞–ª—ñ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ –Ω—ñ–π –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏: ",
                        reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)


@dp.message(lambda message: message.text in ["–†–µ–º–æ–Ω—Ç"], REPAIRS.TYPE_REPAIR)
async def process_type_repair(message: types.Message, state: FSMContext):
    await state.update_data(TYPE_REPAIR=message.text)
    await state.set_state(REPAIRS.REPAIR)
    await message.reply(
        "<code>–ü–µ—Ä–µ–∫–ª–µ–π–∫–∞ —Ç—Ä—É–±–∏</code>\n"
        "<code>–ü—Ä–æ–º–∞–∑–∫–∞ –ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–ª–µ—Å–∞</code>\n"
        "<code>–ü—Ä–æ–º–∞–∑–∫–∞ –∑–∞–¥–Ω—å–æ–≥–æ –∫–æ–ª–µ—Å–∞</code>\n\n\n"

        "\U0001F6AB–†–Ü–î–ö–û –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ–¢–¨–°–Ø\U0001F6AB\n"


        "\n\n–í–≤–µ–¥—ñ—Ç—å —Ä–µ–º–æ–Ω—Ç (—Å–ø–∏—Å–æ–∫ –º–æ–∂–ª–∏–≤–∏—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞–≤–µ–¥–µ–Ω–æ –≤–∏—â–µ). –©–æ–± —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –Ω–∞–∑–≤—É"
        " —Ä–µ–º–æ–Ω—Ç—É –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–æ –Ω—ñ–π –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏: ",
        reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.HTML)






@dp.message(REPAIRS.REPAIR)
async def process_type_repair(message: types.Message, state: FSMContext):
    await state.update_data(REPAIR=message.text)
    temp = await state.get_data()
    date = datetime.datetime.now().strftime("%H:%M  %Y-%m-%d")
    date_repair = datetime.datetime.now().strftime("%Y-%m-%d")

    temp.update({
        'RESPONSIBLE_PERSON': "–¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π",
        'DATE': date,
        'RESPONSIBLE_PERSON_STATUS': "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937"
    })

    text = (f"–°–õ–£–ñ–ë–û–í–ê üîß–†–ï–ú–û–ù–¢üîß: {temp['DATE']}\n"
            f"–ú–Ü–°–¢–û: {temp['CITY']}\n"
            f"–ü–†–ê–¶–Ü–í–ù–ò–ö: {temp['WORKER_PERSON']}\n"
            f"–ù–û–ú–ï–† –°–ê–ú–û–ö–ê–¢–£: {temp['NAME_SCOOTER']}\n"
            f"–í–ò–î –†–ï–ú–û–ù–¢–£: {temp['TYPE_REPAIR']}\n"
            f"–î–ï–¢–ê–õ–¨\–†–ï–ú–û–ù–¢: {temp['REPAIR']}\n\n"
            f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
            f"{temp['RESPONSIBLE_PERSON']} - {temp['RESPONSIBLE_PERSON_STATUS']}")



    IMPORTANT = await bot.send_message(chat_id=data.scooter_chat, message_thread_id=data.scooter_repairs,
                                        text=text)

    temp['DATE_REPAIR'] = date_repair
    temp['USER_ID'] = message.from_user.id
    temp['CHAT_ID'] = IMPORTANT.chat.id
    temp['THREAD_ID'] = IMPORTANT.message_thread_id
    temp['MESSAGE_ID'] = IMPORTANT.message_id

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO REPAIRS (USER_ID, DATE, DATE_REPAIR, CITY, WORKER_PERSON, NAME_SCOOTER, 
                            TYPE_REPAIR, REPAIR, RESPONSIBLE_PERSON,
                            RESPONSIBLE_PERSON_STATUS, CHAT_ID, THREAD_ID, MESSAGE_ID) 
                      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);''',
                   (temp['USER_ID'], temp['DATE'], temp['DATE_REPAIR'], temp['CITY'], temp['WORKER_PERSON'],
                    temp['NAME_SCOOTER'], temp['TYPE_REPAIR'], temp['REPAIR'],
                    temp['RESPONSIBLE_PERSON'], temp['RESPONSIBLE_PERSON_STATUS'],
                    temp['CHAT_ID'], temp['THREAD_ID'], temp['MESSAGE_ID']))
    repair_id = cursor.lastrowid
    conn.commit()
    conn.close()

    await message.reply(f"–°–ª—É–∂–±–æ–≤—É –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\nC–ª—É–∂–±–æ–≤–∞ ‚Ññ{repair_id}", parse_mode="HTML",
                        reply_markup=types.ReplyKeyboardRemove())

    await state.clear()


'''//////////////////////////////////////////////////////////////////////////////////////////////////////////////////'''





@dp.message_reaction()
async def message_reaction_handler(message_reaction: types.MessageReactionUpdated):

    if message_reaction.user.id == data.Troianov_VV:
        await handle_users_reactions(message_reaction)

    if message_reaction.user.id == data.Troianov_VV:
        await handle_purchases_reactions(message_reaction)

    if message_reaction.user.id == data.Troianov_VV:
        await handle_repairs_reactions(message_reaction)
    else:
        return


async def handle_users_reactions(message_reaction):
    temp_new_emoji_data = str(message_reaction.new_reaction)

    # –¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π 578548261

    RESPONSIBLE_EMPLOYER = [578548261]


    if message_reaction.user.id in RESPONSIBLE_EMPLOYER:
        new_info = "responsible_employer_status"
    else:
        return

    if "üëç" in temp_new_emoji_data:
        status_update = "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D"
    elif "üëé" in temp_new_emoji_data:
        status_update = "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E"
    elif "üí©" in temp_new_emoji_data:
        status_update = "–¥–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ \U0001F4A9"
    elif "" in temp_new_emoji_data:
        status_update = "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937"
    else:
        return

    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()

    message_id = message_reaction.message_id

    update_query = f'''
            UPDATE users
            SET {new_info} = ?
            WHERE message_id = ?;
        '''

    cursor.execute(update_query, (status_update, message_id))

    select_query = f'''
            SELECT * FROM users
            WHERE message_id = ?;
        '''

    cursor.execute(select_query, (message_id,))
    rows = cursor.fetchall()

    conn.commit()
    conn.close()

    if not rows:
        print("–í –ë–î –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è MESSAGE_ID:", message_id)
        return

    try:
        for row in rows:
            (
                id, date, user_id, user_name, surname, name, patronymic, birthday, age, phone_number, city, position, to_work,
                from_work, comment, responsible_employer, responsible_employer_status, period_work, photo_passport,
                chat_id, thread_id, message_id
            ) = row

        text = (
                f"–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: {date}\n"
                f"–ü–Ü–ë: {user_name}\n"
                f"–î–ï–ù–¨ –ù–ê–†–û–î–ñ–ï–ù–ù–Ø: {birthday}\n"
                f"–í–Ü–ö: {age}\n"
                f"–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–£: {phone_number}\n"
                f"–ú–Ü–°–¢–û: {city}\n"
                f"–ü–û–°–ê–î–ê: {position}\n"
                f"–ü–†–ò–ô–ù–Ø–¢–û –ù–ê –†–û–ë–û–¢–£: {to_work}\n"
                f"–ö–û–ú–ï–ù–¢–ê–†: {comment}\n\n"
                f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
                f"{responsible_employer} - {responsible_employer_status}")    

        await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption=text)

    except Exception as e:
        print("SHIT:" + str(e))

    try:        
        if "üëç" in temp_new_emoji_data and \
                responsible_employer_status == "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D":
            ready_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705\n" + text
            photo_passport = FSInputFile(f"data/user_photo_passport/{photo_passport}.jpg")
            important = await bot.send_photo(chat_id=chat_id, message_thread_id=data.scooter_users_finish,
                                             photo=photo_passport, caption=ready_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE users
                            SET thread_id = ?, message_id = ?
                            WHERE message_id = ?;
                            '''

            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = chat_id
            new_message_id = message_id

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705" \
                       "\n–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: " + str(date) + \
                       "\n–ü–Ü–ë: " + " " + str(user_name) + \
                       "\n–î–ï–ù–¨ –ù–ê–†–û–î–ñ–ï–ù–ù–Ø: " + str(birthday) + \
                       "\n–í–Ü–ö: " + str(age) + \
                       "\n–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–£: " + str(phone_number) + \
                       "\n–ú–Ü–°–¢–û: " + str(city) + \
                       "\n–ü–û–°–ê–î–ê: " + str(position) + \
                       "\n–ü–†–ò–ô–ù–Ø–¢–û –ù–ê –†–û–ë–û–¢–£: " + str(to_work) + \
                       "\n–ö–û–ú–ï–ù–¢–ê–†: " + str(comment) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(responsible_employer) + "-" + str(responsible_employer_status) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_caption(chat_id=new_chat_id, message_id=new_message_id, caption=new_text)

        elif "üëé" in temp_new_emoji_data and \
                responsible_employer_status == "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E":
            del_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB\n" + text
            photo_passport = FSInputFile(f"data/user_photo_passport/{photo_passport}.jpg")
            important = await bot.send_photo(chat_id=chat_id, message_thread_id=data.scooter_users_finish,
                                             photo=photo_passport, caption=del_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE users
                            SET thread_id = ?, message_id = ?
                            WHERE message_id = ?;
                            '''
            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = chat_id
            new_message_id = message_id

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB" \
                       "\n–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: " + str(date) + \
                       "\n–ü–Ü–ë: " + " " + str(user_name) + \
                       "\n–î–ï–ù–¨ –ù–ê–†–û–î–ñ–ï–ù–ù–Ø: " + str(birthday) + \
                       "\n–í–Ü–ö: " + str(age) + \
                       "\n–ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–£: " + str(phone_number) + \
                       "\n–ú–Ü–°–¢–û: " + str(city) + \
                       "\n–ü–û–°–ê–î–ê: " + str(position) + \
                       "\n–ü–†–ò–ô–ù–Ø–¢–û –ù–ê –†–û–ë–û–¢–£: " + str(to_work) + \
                       "\n–ö–û–ú–ï–ù–¢–ê–†: " + str(comment) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(responsible_employer) + "-" + str(responsible_employer_status) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_caption(chat_id=new_chat_id, message_id=new_message_id, caption=new_text)
    except Exception as e:
        print("ATENTION: " + str(e))



async def handle_purchases_reactions(message_reaction):
    temp_new_emoji_data = str(message_reaction.new_reaction)

    # –¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π 578548261
    
    RESPONSIBLE_PERSON = [578548261]


    if message_reaction.user.id in RESPONSIBLE_PERSON:
        new_info = "RESPONSIBLE_PERSON_STATUS"
    else:
        return

    if "üëç" in temp_new_emoji_data:
        status_update = "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D"
    elif "üëé" in temp_new_emoji_data:
        status_update = "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E"
    elif "üí©" in temp_new_emoji_data:
        status_update = "–¥–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ \U0001F4A9"
    elif "" in temp_new_emoji_data:
        status_update = "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937"
    else:
        return

    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()

    message_id = message_reaction.message_id

    update_query = f'''
            UPDATE PURCHASES
            SET {new_info} = ?
            WHERE MESSAGE_ID = ?;
        '''

    cursor.execute(update_query, (status_update, message_id))

    select_query = f'''
            SELECT * FROM PURCHASES
            WHERE MESSAGE_ID = ?;
        '''

    cursor.execute(select_query, (message_id,))
    rows = cursor.fetchall()

    conn.commit()
    conn.close()

    if not rows:
        print("–í –ë–î –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è MESSAGE_ID:", message_id)
        return


    try:
        for row in rows:
            (
                ID, DATE, MONTH, USER_ID, DATE_BOUGHT, BUYER_PERSON, CITY, PURCHASE, QUANTITY, COST_PURCHASE,
                REASON_PURCHASE, COMMENT, PHOTO_PURCHASE, RESPONSIBLE_PERSON, RESPONSIBLE_PERSON_STATUS, CHAT_ID,
                THREAD_ID, MESSAGE_ID
            ) = row

        text = (
                f"–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: {DATE}\n"
                f"–ü–û–ö–£–ü–ï–¶–¨: {BUYER_PERSON}\n"
                f"–ú–Ü–°–¢–û: {CITY}\n"
                f"–ü–û–ö–£–ü–ö–ê: {PURCHASE}\n"
                f"–í–ê–†–¢–Ü–°–¢–¨: {COST_PURCHASE}\n"
                f"–ö–û–ú–ï–ù–¢–ê–†: {COMMENT}\n\n"                
                f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
                f"{RESPONSIBLE_PERSON} - {RESPONSIBLE_PERSON_STATUS}")


        await bot.edit_message_caption(chat_id=CHAT_ID, message_id=MESSAGE_ID, caption=text)
    except Exception as e:
        print("SHIT:" + str(e))

    try:        
        if "üëç" in temp_new_emoji_data and \
                RESPONSIBLE_PERSON_STATUS == "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D":
            ready_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705\n" + text
            photo_purchase = FSInputFile(f"data/photo_purchase/{PHOTO_PURCHASE}.jpg")
            important = await bot.send_photo(chat_id=CHAT_ID, message_thread_id=data.scooter_purchases_finish,
                                             photo=photo_purchase, caption=ready_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE PURCHASES
                            SET THREAD_ID = ?, MESSAGE_ID = ?
                            WHERE MESSAGE_ID = ?;
                            '''

            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = CHAT_ID
            new_message_id = MESSAGE_ID

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705" \
                       "\n–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: " + str(DATE) + \
                       "\n–ü–û–ö–£–ü–ï–¶–¨: " + str(BUYER_PERSON) + \
                       "\n–ú–Ü–°–¢–û: " + str(CITY) + \
                       "\n–ü–û–ö–£–ü–ö–ê: " + str(PURCHASE) + \
                       "\n–í–ê–†–¢–Ü–°–¢–¨: " + str(COST_PURCHASE) + \
                       "\n–ö–û–ú–ï–ù–¢–ê–†: " + str(COMMENT) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(RESPONSIBLE_PERSON) + "-" + str(RESPONSIBLE_PERSON_STATUS) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_caption(chat_id=new_chat_id, message_id=new_message_id, caption=new_text)

        elif "üëé" in temp_new_emoji_data and \
                RESPONSIBLE_PERSON_STATUS == "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E":
            del_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB\n" + text
            photo_purchase = FSInputFile(f"data/photo_purchase/{PHOTO_PURCHASE}.jpg")
            important = await bot.send_photo(chat_id=CHAT_ID, message_thread_id=data.scooter_purchases_finish,
                                             photo=photo_purchase, caption=del_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE PURCHASES
                            SET THREAD_ID = ?, MESSAGE_ID = ?
                            WHERE MESSAGE_ID = ?;
                            '''
            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = CHAT_ID
            new_message_id = MESSAGE_ID

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB" \
                       "\n–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: " + str(DATE) + \
                       "\n–ü–û–ö–£–ü–ï–¶–¨: " + str(BUYER_PERSON) + \
                       "\n–ú–Ü–°–¢–û: " + str(CITY) + \
                       "\n–ü–û–ö–£–ü–ö–ê: " + str(PURCHASE) + \
                       "\n–í–ê–†–¢–Ü–°–¢–¨: " + str(COST_PURCHASE) + \
                       "\n–ö–û–ú–ï–ù–¢–ê–†: " + str(COMMENT) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(RESPONSIBLE_PERSON) + "-" + str(RESPONSIBLE_PERSON_STATUS) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_caption(chat_id=new_chat_id, message_id=new_message_id, caption=new_text)
    except Exception as e:
        print("ATENTION: " + str(e))


'''///////////////////////////////////////////////////////////////////////////////////////////'''


async def handle_repairs_reactions(message_reaction):
    temp_new_emoji_data = str(message_reaction.new_reaction)

    # –¢—Ä–æ—è–Ω–æ–≤ –í—ñ—Ç–∞–ª—ñ–π 578548261

    RESPONSIBLE_PERSON = [578548261]


    if message_reaction.user.id in RESPONSIBLE_PERSON:
        new_info = "RESPONSIBLE_PERSON_STATUS"
    else:
        return

    if "üëç" in temp_new_emoji_data:
        status_update = "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D"
    elif "üëé" in temp_new_emoji_data:
        status_update = "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E"
    elif "üí©" in temp_new_emoji_data:
        status_update = "–¥–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ \U0001F4A9"
    elif "" in temp_new_emoji_data:
        status_update = "–Ω–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–æ \U0001F937"
    else:
        return

    conn = sqlite3.connect('base_scooters.db')
    cursor = conn.cursor()

    message_id = message_reaction.message_id

    update_query = f'''
            UPDATE REPAIRS
            SET {new_info} = ?
            WHERE MESSAGE_ID = ?;
        '''

    cursor.execute(update_query, (status_update, message_id))

    select_query = f'''
            SELECT * FROM REPAIRS
            WHERE MESSAGE_ID = ?;
        '''

    cursor.execute(select_query, (message_id,))
    rows = cursor.fetchall()

    conn.commit()
    conn.close()

    if not rows:
        print("–í –ë–î –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è MESSAGE_ID:", message_id)
        return

    try:
        for row in rows:
            (
                ID, USER_ID, DATE, DATE_REPAIR, CITY, WORKER_PERSON, NAME_SCOOTER, TYPE_REPAIR, REPAIR, COMMENT,
                PHOTO_REPAIR, RESPONSIBLE_PERSON, RESPONSIBLE_PERSON_STATUS, CHAT_ID, THREAD_ID, MESSAGE_ID
            ) = row

        text = (f"–°–õ–£–ñ–ë–û–í–ê üîß–†–ï–ú–û–ù–¢üîß: {DATE}\n"
                f"–ú–Ü–°–¢–û: {CITY}\n"
                f"–ü–†–ê–¶–Ü–í–ù–ò–ö: {WORKER_PERSON}\n"
                f"–ù–û–ú–ï–† –°–ê–ú–û–ö–ê–¢–£: {NAME_SCOOTER}\n"
                f"–í–ò–î –†–ï–ú–û–ù–¢–£: {TYPE_REPAIR}\n"
                f"–î–ï–¢–ê–õ–¨\–†–ï–ú–û–ù–¢: {REPAIR}\n\n"
                f"–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n"
                f"{RESPONSIBLE_PERSON} - {RESPONSIBLE_PERSON_STATUS}")

        await bot.edit_message_text(chat_id=CHAT_ID, message_id=MESSAGE_ID, text=text)
    except Exception as e:
        print("SHIT:" + str(e))

    try:
        if "üëç" in temp_new_emoji_data and \
                RESPONSIBLE_PERSON_STATUS == "–ø–æ–≥–æ–¥–∂–µ–Ω–æ \U0001F44D":
            ready_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705\n" + text
            important = await bot.send_message(chat_id=CHAT_ID, message_thread_id=data.scooter_repairs_finish,
                                             text=ready_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE REPAIRS
                            SET THREAD_ID = ?, MESSAGE_ID = ?
                            WHERE MESSAGE_ID = ?;
                            '''

            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = CHAT_ID
            new_message_id = MESSAGE_ID

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U00002705–°–õ–£–ñ–ë–û–í–£ üîß–†–ï–ú–û–ù–¢üîß –û–ü–†–ê–¶–¨–û–í–ê–ù–û\U00002705" \
                       "\n–ú–Ü–°–¢–û: " + str(CITY) + \
                       "\n–ü–†–ê–¶–Ü–í–ù–ò–ö: " + str(WORKER_PERSON) + \
                       "\n–ù–û–ú–ï–† –°–ê–ú–û–ö–ê–¢–£: " + str(NAME_SCOOTER) + \
                       "\n–í–ò–î –†–ï–ú–û–ù–¢–£: " + str(TYPE_REPAIR) + \
                       "\n–î–ï–¢–ê–õ–¨\–†–ï–ú–û–ù–¢: " + str(REPAIR) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(RESPONSIBLE_PERSON) + "-" + str(RESPONSIBLE_PERSON_STATUS) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_text(chat_id=new_chat_id, message_id=new_message_id, text=new_text)

        elif "üëé" in temp_new_emoji_data and \
                RESPONSIBLE_PERSON_STATUS == "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ \U0001F44E":
            del_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB\n" + text
            important = await bot.send_message(chat_id=CHAT_ID, message_thread_id=data.scooter_repairs_finish,
                                             text=del_text)

            old_thread_id = important.message_thread_id
            old_message_id = important.message_id

            conn = sqlite3.connect('base_scooters.db')
            cursor = conn.cursor()
            update_query = f'''
                            UPDATE REPAIRS
                            SET THREAD_ID = ?, MESSAGE_ID = ?
                            WHERE MESSAGE_ID = ?;
                            '''
            cursor.execute(update_query, (old_thread_id, old_message_id, message_id))
            conn.commit()
            conn.close()

            new_chat_id = CHAT_ID
            new_message_id = MESSAGE_ID

            link = "https://t.me/c/2448053501/" + str(old_thread_id) + "/" + str(old_message_id)

            correct_datatime = datetime.datetime.today().strftime("%d.%m.%Y %H:%M")
            new_text = "\U0001F6AB–°–õ–£–ñ–ë–û–í–£ üîß–†–ï–ú–û–ù–¢üîß –í–Ü–î–•–ò–õ–ï–ù–û\U0001F6AB" \
                       "\n–î–ê–¢–ê –°–õ–£–ñ–ë–û–í–û–á: " + str(DATE) + \
                       "\n–ú–Ü–°–¢–û: " + str(CITY) + \
                       "\n–ü–†–ê–¶–Ü–í–ù–ò–ö: " + str(WORKER_PERSON) + \
                       "\n–ù–û–ú–ï–† –°–ê–ú–û–ö–ê–¢–£: " + str(NAME_SCOOTER) + \
                       "\n–í–ò–î –†–ï–ú–û–ù–¢–£: " + str(TYPE_REPAIR) + \
                       "\n–î–ï–¢–ê–õ–¨\–†–ï–ú–û–ù–¢: " + str(REPAIR) + \
                       "\n\n–í–Ü–î–ü–û–í–Ü–î–ê–õ–¨–ù–ê –û–°–û–ë–ê\n" + \
                       "" + str(RESPONSIBLE_PERSON) + "-" + str(RESPONSIBLE_PERSON_STATUS) + \
                       "\n\n–î–ê–¢–ê –û–ü–†–ê–¶–Æ–í–ê–ù–ù–Ø: " + str(correct_datatime) + "\n" + link

            await bot.edit_message_text(chat_id=new_chat_id, message_id=new_message_id, text=new_text)
    except Exception as e:
        print("ATENTION: " + str(e))



async def main():

    '''UKR = zoneinfo.ZoneInfo("Europe/Kiev")

    #scheduler = AsyncIOScheduler(timezone=UKR)
    #scheduler.add_job(func=send_document_to_user, trigger='cron', day_of_week='mon-fri', hour=8, minute=59)
    #scheduler.add_job(func=send_rating_to_user, trigger='cron', day_of_week='mon-fri', hour=9, minute=30)
    #scheduler.add_job(test.copy_excel_content, trigger='cron', day_of_week='mon-fri', hour=15, minute=43)
    scheduler.start()'''


    await dp.start_polling(bot)


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as shit:
        print("–ü–û–ú–ò–õ–ö–ê –í–ò–ö–û–ù–ê–ù–ù–Ø –§–ê–ô–õ–£:", shit)

    except KeyboardInterrupt:
        print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ä—É—á–Ω—É")


